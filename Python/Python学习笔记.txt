
把程序作为一个可以运行的Unix脚本文件
#!/usr/bin/python
$chmod +x test.py
$./test.py

10/3 = 3
10%3 = 1
2**4 = 16
divmod(10, 3) = (3, 1)

处理list的方法
L.append(var)	追加元素
L.count(var)	计算var在L中出现的次数
len(L)		返回L的长度
L.extend(list)	将list追加在L后面
L.index(var)	返回var在L中的位置
L.insert(index, var)	在index处，插入var，其余元素向后推，如果index大于len(list)，就在最后添加，如果index小于0，就在最开始处添加
L.pop()		返回最后一个元素，并且删除最后一个元素
L.remove(var)	找到var并且删除，若找不到，抛出异常
L.reverse()		将L倒序
L.sort()		将L排序

'''
语法：
str.rjust(width[, fillchar])
参数:
width -- 指定填充指定字符后中字符串的总长度.
fillchar -- 填充的字符，默认为空格。
'''
#ljust左对齐
str='xiaodeng'
print str.ljust(20,'-')#使用短横线做填充
#rjust右对齐
print str.rjust(20,'-')
#center居中对齐
print str.center(20,'-')

>>> a=["123","456","abc","Abc","AAA"]
>>> [ k.center(9) for k in a ]
[' 123 ', ' 456 ', ' abc ', ' Abc ', ' AAA ']
#得到a中仅由字母组成的字符串，并变成大写
>>> [ k.upper() for k in a if k.isalpha() ]
['ABC', 'ABC', 'AAA']
#得到a中仅由大写字母组成的字符串，并变成小写
>>> [ k.lower() for k in a if k.isupper() ]
['aaa']
#得到a中仅由数字构成的字符串，并变为整数类型
>>> [ int(k) for k in a if k.isdigit() ]
[123, 456]
把list中的所有元素加1
[ k+1 for k in list]
提取出list中所有整数变量
[ k for k in list if type(k)==types.IntType]
把list中的所有整数元素增加1
[ k + 1 for k in list if type(k)==types.IntType ]

# 合并多行
"abc" \
'def'

\\ \ 反斜杠
\' ' 单引号
\" " 双引号
\a 0x07 响铃
\b 0x08 退格
\f 0x0c Formfeed (FF)
\n 0x0a 换行
\N{name} Unicode字符
\r 0x0d 回车
\t 0x09 水平制表符
\v 0x0b 垂直制表符
\u{xxxx} Unicode编码
\ooo 0xooo ooo表示的八进制字符
\xhh 0xhh hh表示的十六进制字符

"this is test".capitalize() #首字母大写
"THIS IS TEST".lower() #全部变成小写
"this is test".upper() #全部变成大写
"This Is Test".swapcase() #大小写互换

str="Hello"
>>> str[1:-1]
'ell'
>>> str[-1:2]
''

s.isalnum() #所有字符都是数字0-9或字母A-Z,a-z
s.isalpha() #所有字符都是字母a-z或A-Z
s.isdigit() #所有字符都是数字0-9
s.islower() #所有字符都是小写字母a-z
s.isupper() #所有字符都是大写字母A-Z
s.istitle() #所有单词都是首字母大写
s.isspace() #所有字符都是空白字符\n,\t,\r,' '

s.find(substring,[start [,end]]) #如果找到，返回索引值，找不到返回-1
s.rfind(substring,[start [,end]]) #反向查找
s.index(substring,[start [,end]]) #和find()类似，但是如果找不到substring，就产生一个ValueError的异常
s.rindex(substring,[start [,end]]) #和index()类似，但是是反向查找
s.count(substring,[start [,end]]) #返回找到substring的次数

>>> print "%s's height is %dcm"%("Charles",180)
Charles's height is 180cm
一个%接一个内容
d和i	表示有符号十进制整数
o		表示无符号八进制数
u		表示无符号整数
x		表示无符号十六进制(小写)
X		表示无符号十六进制(大写)
e		表示浮点数(小写)
E		表示浮点数(大写)
f		表示浮点数
g		表示浮点数，如果是小于0.0001或者不够精度，就用科学表示法
c		表示把ASCII整数表示单个字符
r		表示一个字符串，这个字符串使用repr()的返回值  >>>"%r"%({"one":1,"two":2})		"{'two':2,'one':1}"		和print expr(obj)打印出来的效果一样
s		表示一个字符串，这个字符串使用str()函数的返回值

>>> print "%(name)s's height is %(height)d cm" \
... ",%(name)s's weight is %(weight)d kg" % \
... {"name":"Charles","height":170,"weight":70}
Charles's height is 170 cm,Charles's weight is 70 kg
minimum field width 表示最小长度
>>> print "%10d,%10d"%(1,2)
1, 2
precision用来表示精度，只对浮点数有作用，带有四舍五入的功能
>>> print "%10.2f,%10.2f"%(10.123456,20.126456)
10.12, 20.13

0表示补全，使之满足宽度
>>> print "%010d,%010d"%(1,2)
0000000001,0000000002

-表示左对齐
>>> print "%-010d,%-010d"%(1,2)
1      ,2          

空格表示0和正数前面加个空格，负数前面加-
>>> print "% 10d,% 10d,% 10d"%(-1,2,-0)
          -1,           2,            0

+表示显示符号		  
>>> print "%+10d,%+10d,%+10d"%(-1,2,0)
       -1,        +2,         +0		  
		  
s.ljust(width) #左对齐并补位
s.rjust(width) #右对齐并补位
s.center(width) #居中并补位
s.lstrip() #去掉左边空白字符
s.rstrip() #去掉游标空白字符
s.lstrip() #去掉两边空白字符  

s.join(words)，words是一个只含有字符串的tuple或者list
>>> "\n".join(["Hello","World","Python","Said"])
'Hello\nWorld\nPython\nSaid'

s.split(words)，words是一个字符串，表示分隔符
>>> "This is a book".split(" ")
['This', 'is', 'a', 'book']

tuple是常量list，tuple不能pop，remove，insert等方法
tuple用()表示，如a=(0, 1, 2, 3, 4,)
tuple可以用下表返回元素或者子tuple
tuple可以用于多个变量的赋值
a, b=(1,2)
一个元素的元组：(1, )

sequence 包括string, list, tuple。他们都有以下一些通用的操作
in判断某个object是不是在一个sequence中

字典
>>> pricelist={"clock":12,"table":100,"xiao":100 }
>>> pricelist["clock"]
12
>>> del pricelist["clock"]
>>> pricelist
{'table': 100, 'xiao': 100}

dict(L) 可以构造一个dictionary
其中L是一个list，L中每一个元素是一个tuple
tuple中有两个元素，前面的是key，后面的事value
>>> pricelist=dict([(x,10*x) for x in [1,2,3]])
>>> pricelist
{1: 10, 2: 20, 3: 30}
对不存在的key做赋值操作，则增加一个元素，读取不存在的key，会抛出异常

D.get(key)和D.get(key, defaultValue)
若无key，D.get(key)返回None，D.get(key, defaultValue)返回defaultValue

D.haskey(key)	用户判断D中是否含有key，相当于key in D.keys()
>>> a
{'four': 4, 'three': 3, 'two': 2, 'one': 1}
>>> print a.has_key("one")
1
>>> print a.has_key("abc")
0

D.items()	得到一个list，其中的每个元素是一个含有两个元素的tuple，tuple中前面是key，后面是value
{'four': 4, 'three': 3, 'two': 2, 'one': 1}
>>> a.items()
[('four', 4), ('three', 3), ('two', 2), ('one', 1)]

D.copy()	相当于dict(D.items())	但是若欲得到副本，用copy更快
D.keys()	得到list，含有D中的所有key
a.copy()还可以写成dict([(k,a[k]) for k in a.keys()])
D.values()	得到list，含有D中的所有value

D.update(E)	从E中得到新的数据，同等于
for k in E.keys():
	D[k]=E[k]
D.popitem()		得到一个pair，并且从原字典删除，若D是空，抛出异常

for(i=0;i<len;i++){
	if(a[i]==100) break;
}
if(i==len){/*100 not found*/
	/*do something*/
}
上面是C的实现，下面是python的实现，功能类似
>>> a
[1, 2, 3, 4]
>>> for x in a:
... if x==100: break
... else:
... print "100 not found"
...
100 not found

>>> a=[1,2,3,4]
>>> for x in a:
... 	x=x+1
>>> x
5
>>> a
[1, 2, 3, 4]
>>> D={"one":1,"two":2,"three":3}
>>> for x in D:
... 	D[x] += 1;
>>> D
{'three': 4, 'two': 3, 'one': 2}
>>> a
[1, 2, 3, 4]
>>> for x in range(len(a)):
... 	a[x]=a[x]+2
>>> a
[3, 4, 5, 6]

>>> def myjoin(str,sep=","):
... 	return sep.join(str)
>>> myjoin(["a","b","c"])
'a,b,c'
>>> myjoin(["a","b","c"],";")
'a;b;c'

>>> def printf(format,*arg):
... 	print format%arg
>> def printf(format,*arg):
... 	print type(arg)
... 	print format%arg
>>> printf("a",1)
<type 'tuple'>

>>> def printf(format,**keyword):
... 	for k in keyword.keys():
... 		print "keyword[%s] is %s"%(k,keyword[k])
>>> printf("ok",One=1,Two=2,Three=3)
keyword[Three] is 3
keyword[Two] is 2
keyword[One] is 1
两种机制和在一起使用
>>> def testfun(fixed,optional=1,*arg,**keywords):
... 	print "fixed parameters is ",fixed
... 	print "optional parameter is ",optional
... 	print "Arbitrary parameter is ", arg
... 	print "keywords parameter is ",keywords
>>> testfun(1,2,"a","b","c",one=1,two=2,three=3)
fixed parameters is 1
optional parameter is 2
Arbitrary parameter is ('a', 'b', 'c')
keywords parameter is {'three': 3, 'two': 2, 'one': 1}
函数接受参数的顺序，先接受固定参数，然后是可选，然后是任意，最后是带名字的任意参数

可以简单的认为lambda函数式一种匿名函数
>>> f = lambda a,b: a+b
>>> f(1,2)
3
>>> f("abc","def")
'abcdef'
一个函数可以返回一个lambda函数
>>> def incfun(a):
... return lambda x: x+a
>>> incfun(2)(12)
14
>>> incfun(2)(13)
15
>>> incfun(4)(13)
17

python允许函数嵌套
>>> def outfun(a,b):
... def innerfun(x,y):
... return x+y
... return innerfun(a,b)
>>> outfun(1,2)
3

用del语句可以从一个name spcae 删除一个name
>>> del a

得到一个object的name space的方法是var(object)
得到一个object的attribute的方法是dir(object)

isinstance(obj,cls)	查看obj是不是cls的instance
issubclass(subcls,supcls) 查看subcls是不是supcls的子类

python有profile module用于计算python程序中每段代码的性能，找到瓶颈，确认瓶颈，然后优化

和操作系统相关的调用
sys.argv		包含所有的命令行参数
sys.stdout		标准输入输出
sys.exit(exit_code)		退出程序
sys.modules		是一个dictionary，表示系统中所有可用的module，例如：sys.modules["os"]
sys.platform	得到操作系统环境
os.environ		一个dictionary,包含环境变量的映射关系，os.environ["HOME"]可以得到HOME的值
os.chdir(dir)	改变当前目录
os.getcwd()		得到当前目录

>>> os.mkdir('/tmp/xx') #创建目录
>>> os.system("echo 'hello' > /tmp/xx/a.txt")
0
>>> os.listdir('/tmp/xx')
>>> os.listdir('/tmp/xx')
['a.txt']
>>> os.rename('/tmp/xx/a.txt','/tmp/xx/b.txt')
>>> os.listdir('/tmp/xx')
['b.txt']
>>> os.remove('/tmp/xx/b.txt')
>>> os.listdir('/tmp/xx')
[]
>>> os.rmdir('/tmp/xx') #删除目录
>>> os.listdir('/tmp/xx')

正则
\d [0-9]
\D [^0-9]
\s [ \t\n\r\f\v]
\S [^ \t\n\r\f\v]
\w [a-zA-Z0-9_]
\W [^a-zA-Z0-9_]
\t 表示和tab匹配
单独的一个"."如果没有出席那在[]中，表示除了换行\n以外的匹配任何字符，等同于[^\n]
>>> re.compile("a*").match('aaaa').end()
4
>>> re.compile("a*?").match('aaaa').end()
0
最小匹配：在*+?{m,n}后面加一个?，变成*?,+?,??,[m,n]?表示最小匹配
re.compile("a").match("bbab")  match是把re_obj和str的开头进行匹配
re.compile("a").search("bbab")  search是在str中搜索第一个和re_obj匹配的部分，不必从开头就匹配
re.compile("a").findall("bbab")  在str中搜索所有和re_obj匹配的部分，返回tuple

>>> x="""
... name: Charles
... Address: BUPT
... telephone: 62281234
... email: annCharles@tom.com
...
... name: Ann
... Address: BUPT
... telephone: 62284321
... email: CharlesWang@peoplemail.com.cn
... """
>>> p=re.compile(
... r"^name:(.*)\n^Address:(.*)\n^telephone:(.*)\n^email:(.*)\n",re.M)
>>> for m in p.finditer(x):
... print "here is your friends list"
... print "%s,%s,%s,%s"%m.groups()
...
here is your friends list
Charles, BUPT, 62281234, annCharles@tom.com
here is your friends list
Ann, BUPT, 62284321, CharlesWang@peoplemail.com.cn

简单的客户端的例子
#/usr/bin/env python
# simpleClient.py
import sys,os
import socket
def main():
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((socket.gethostname(),8000))
s.send("GET index.html\n")
s.shutdown(1);
sys.stdout.write(s.recv(1024))
s.close()
if __name__ == "__main__":
main()
简单的服务端的例子
# simpleserver.py
import socket,sys,os,popen2
def main():
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.bind((socket.gethostname(),8080))
s.listen(1)
clientsocket,clientaddress = s.accept();
clientsocket.send("welcome %s\n" % str(clientaddress))
data.send("%s"%str(arg))
clinetsocket.close()
s.close()
if __name__ == "__main__" :
main()

创建socket的函数：socket(address_family,type,protocol_type)
1.address_family用来指定要建立哪一类socket，
'AF_APPLETALK', 'AF_AX25', 'AF_BRIDGE',
'AF_INET', 'AF_INET6', 'AF_IPX',
'AF_NETROM','AF_PACKET', 'AF_ROSE',
'AF_UNIX', 'AF_UNSPEC', 'AF_X25']
最常用的事AF_INET
2.type用来指定通信类型
'SOCK_DGRAM', 'SOCK_RAW', 'SOCK_RDM',
'SOCK_SEQPACKET', 'SOCK_STREAM'
3.protocol_type用于制定协议类型
建立TCP socket的常用方法：sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
建立UDP socket的常用方法：sock = sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
建立Unix 域用于进程间通信的socket方法：sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

>>> import socket
>>> socket.gethostname()
'charles.home.com.cn'
>>> socket.gethostbyname(socket.gethostname())
'192.168.200.18'
>>> socket.gethostbyname_ex("www.sohu.com")
('pagegrp1.sohu.com', ['www.sohu.com'], ['61.135.150.67',
'61.135.150.69', '61.135.150.74', '61.135.150.75', '61.135.131.73',
'61.135.131.180', '61.135.131.183', '61.135.132.172', '61.135.132.173',
'61.135.132.174', '61.135.132.176', '61.135.133.109', '61.135.145.47',
'61.135.150.65', '61.135.150.66'])
>>> socket.gethostbyname("www.sohu.com")
'61.135.131.180'

gethostname可以得到当前的主机名称
gethostbynam可以根据主机名称得到主机的IP地址
gethostbyname可以根据主机名称得到主机的所有名称信息，返回tuple
gethostbyaddr可以根据IP地址得到主机的所有名称信息
getservbyname可以根据服务的名称，得到对应的端口号，需要指定是TCP协议还是UDP协议

TCP是面向连接的，UPD是面向非连接的，TCP就像打电话，需要接听建立通信，UDP就像寄信，不需要建立连接，直接发送

#/usr/bin/env python
# echo.server.fork.py
# simpleserver.py
import socket,sys,os
clients=[]
def handledata(s):
	data = s.recv(1024)
	while data:
		try:
			s.send(data)
			data = s.recv(1024)
		except:
			sys.exit(0)
def main():
	s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.bind((socket.gethostname(),8080))
	s.listen(10)
	while 1:
		clientsocket,clientaddress = s.accept();
		pid = os.fork()
		if pid==0: # child process
			# close the server socket .
			# because the child process should not
			# care about the accept the connect request
			s.close()
			handledata(clientsocket)
		else: # this is parent process
			# close the client socket
			# because the parent should not
			# care about sending/receiving data
			clientsocket.close()
if __name__ == "__main__" :
	main()



	

